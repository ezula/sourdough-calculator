{"version":3,"sources":["components/Ratios.tsx","reducer/sourdoughReducer.ts","components/Sourdough.tsx","components/Navbar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Ratios","flour","water","sourdough","salt","className","sourdoughReduder","_state","action","type","hydration","saltPercentage","Math","floor","Error","initialState","Sourdough","React","useState","setHydration","setFlour","setSaltPercentage","useReducer","state","dispatch","useEffect","Number","htmlFor","id","onChange","e","target","value","placeholder","max","min","step","Navbar","to","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8da8370.chunk.js","sourcesContent":["import PropTypes, { InferProps } from \"prop-types\";\n\nexport default function Ratios ({ flour = 0, water = 0, sourdough = 0, salt = 0 }\n  : InferProps<typeof Ratios.propTypes>) {\n  return (\n    <div className=\"ratios-container small-container\">\n      <p>Mjöl: {flour} g</p>\n      <p>Vatten: {water} g</p>\n      <p>Surdeg: {sourdough} g</p>\n      <p>Salt: {salt} g</p>\n    </div>\n  )\n}\n\nRatios.propTypes = {\n  flour: PropTypes.number.isRequired,\n  water: PropTypes.number.isRequired,\n  sourdough: PropTypes.number.isRequired,\n  salt: PropTypes.number.isRequired,\n};\n","type SourdoughState = {\n  water: number\n  sourdough: number\n  salt: number\n}\n\ntype CalculateAction = {\n  type: 'calc'\n  flour: number\n  hydration: number\n  saltPercentage: number\n}\n\ntype SourdoughActions = CalculateAction;\n\nconst sourdoughReduder = (_state: SourdoughState, action: SourdoughActions) => {\n  if (action.type === 'calc') {\n    const { flour, hydration, saltPercentage } = action;\n    return {\n      water: Math.floor(flour * hydration / 100),\n      sourdough: Math.floor(flour * 0.1),\n      salt: Math.floor(flour * (saltPercentage / 100))\n    }\n  } else {\n    throw new Error('Unsupported Action')\n  }\n}\n\nexport { sourdoughReduder }\nexport type { SourdoughState, SourdoughActions }\n","import React from 'react';\nimport { Ratios } from '.';\n\nimport { SourdoughState, sourdoughReduder } from '../reducer/sourdoughReducer'\n\nconst initialState: SourdoughState = {\n  water: 0,\n  sourdough: 0,\n  salt: 0\n}\n\nexport default function Sourdough() {\n  const [ hydration, setHydration ] = React.useState(\"82\")\n  const [ flour, setFlour ] = React.useState(\"600\")\n  const [ saltPercentage, setSaltPercentage ] = React.useState(\"2\")\n\n  const [state, dispatch] = React.useReducer(\n    sourdoughReduder,\n    initialState\n  )\n\n  const { water, sourdough, salt } = state;\n\n  React.useEffect(() => {\n    dispatch({ \n      type: 'calc',\n      flour: Number(flour), \n      hydration: Number(hydration), \n      saltPercentage: Number(saltPercentage)\n    })\n  }, [hydration, flour, saltPercentage])\n\n  return (\n    <div className=\"container small-container\">\n      <h1 className=\"center-text\">Surdegskalkylatorn</h1>\n      <h3 className=\"center-text\">Beräkna mängder genom att ange hydrering, mängden mjöl samt hur mycket salt.</h3>\n\n      <form className=\"content-form\">\n        <label htmlFor=\"hydration\">Hydrering:</label>\n        <input id=\"hydration\" type=\"number\" onChange={(e) => setHydration(e.target.value)} value={hydration} placeholder=\"Ange hydrering i procent\" max={100} min={0} />\n        <label htmlFor=\"flour\">Mjöl:</label>\n        <input id=\"flour\" type=\"number\" onChange={(e) => setFlour(e.target.value)} value={flour} placeholder=\"Ange mjöl i gram\" />\n        <label htmlFor=\"salt\">Salt:</label>\n        <div className=\"salt-container\">\n          <input id=\"salt\" type=\"range\" min=\"0\" max=\"10\" step=\"0.1\" onChange={(e) => setSaltPercentage(e.target.value)} value={saltPercentage} />\n          <span>{saltPercentage}%</span>\n        </div>\n        \n      </form>\n\n      <Ratios \n        flour={Number(flour)}\n        water={water}\n        sourdough={sourdough}\n        salt={salt} \n      />\n\n    </div>\n  );\n}\n","import { Link } from 'react-router-dom'\n\nexport default function Navbar() {\n  return (\n    <div className=\"container navbar\">\n      <Link to='/'>Hem</Link>\n      <nav className=\"nav-links\">\n        <Link to='/other'>Annat</Link>\n        <Link to='/about'>Kontakt</Link>\n      </nav>\n    </div>\n  )\n}","import './App.css'\n\nimport { \n  Navbar,\n  Sourdough\n} from './components'\n\nimport { \n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom'\n\nexport default function App() {\n  return (\n    <Router>\n\n      <Navbar />\n\n      <Switch>\n        <Route exact path='/'>\n          <Sourdough />\n        </Route>\n        <Route path='/other'>\n          <div>Other</div>\n        </Route>\n        <Route path='/about'>\n          <div>About</div>\n        </Route>\n        <Route path='*'>\n          <div>404</div>\n        </Route>\n      </Switch>\n    </Router>\n    \n  )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}